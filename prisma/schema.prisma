generator client {
  provider = "prisma-client-js"
   previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  TEMPORARY
  ACTIVE
}

enum Role {
  USER
  MEMBER
  ADMIN
}

model User {
  id          String     @id @default(cuid())
  name        String
  phoneNumber String     @unique
  status      UserStatus @default(TEMPORARY)
  role        Role?      @default(USER)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  agreedToTerms           Boolean  @default(false)
  agreedToPrivacyPolicy   Boolean  @default(false)
  agreedToMarketing       Boolean  @default(false)

  sessions       Session[]
  keys           Key[]
  eventEntries   StampEntry[]
  StampCard StampCard[]
  reviews Review[]
  ClaimableStampRedemption ClaimableStampRedemption[]

  PushSubscription PushSubscription[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Key {
  id             String  @id
  userId         String
  hashedPassword String?
  user           User    @relation(references: [id], fields: [userId], onDelete: Cascade)
  @@unique([id, userId])
}

model PushSubscription {
  id        Int      @id @default(autoincrement())
  token     String   @unique // 푸시 토큰은 기기마다 고유하므로 unique 속성을 부여합니다.
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
// --- 이벤트 및 스탬프 관련 모델 ---

model EventCategory {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  events Event[]
}

model Event {
  id            String   @id @default(cuid())
  name          String
  description   String?
  imageUrl      String?
  isAllDay      Boolean   @default(true)
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  categoryId    Int
  category      EventCategory @relation(fields: [categoryId], references: [id])
  participants  StampEntry[]
  claimableStamps ClaimableStamp[] // 이 이벤트에 연결된 임시 코드 스탬프들

  images        EventImage[]

  reviews Review[]
}

model EventImage {
  id      Int    @id @default(autoincrement())
  url     String // 이미지 파일의 URL
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
model StampEntry {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  eventId     String?
  event       Event?   @relation(fields: [eventId], references: [id])
  adminNote   String?

  stampCardId Int
  stampCard   StampCard @relation(fields: [stampCardId], references: [id])
  isViewed    Boolean  @default(false)
}

model StampCard {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  isRedeemed Boolean      @default(false)
  entries    StampEntry[]
  coupon     Coupon?

  userId     String
  user       User     @relation(fields: [userId], references: [id])
}
// --- 리워드 및 임시 코드 관련 모델 ---

model Coupon {
  id          String   @id @default(cuid())
  code        String   @unique
  description String
  isUsed      Boolean  @default(false)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  stampCardId Int      @unique
  stampCard   StampCard @relation(fields: [stampCardId], references: [id])
}

// 👈 전화번호 모를 때를 위한 '주인 없는 스탬프' 모델
model ClaimableStamp {
  id               String    @id @default(cuid())
  claimCode        String    @unique
  eventId          String
  event            Event     @relation(fields: [eventId], references: [id])
  expiresAt        DateTime
  createdAt        DateTime  @default(now())
  // 👇 확장성을 위해 이 필드들을 추가합니다.
  maxUses          Int?      @default(1)// 최대 사용 횟수 (null: 무제한, 1: 1회용)
  currentUses      Int       @default(0) // 현재 사용 횟수

  // 👇 사용 기록을 위한 관계를 추가합니다.
  redemptions      ClaimableStampRedemption[]
}

// 👇 이 모델을 파일 하단에 새로 추가해주세요.
model ClaimableStampRedemption {
  id               Int      @id @default(autoincrement())
  redeemedAt       DateTime @default(now())

  claimableStampId String
  claimableStamp   ClaimableStamp @relation(fields: [claimableStampId], references: [id])

  userId           String
  user             User     @relation(fields: [userId], references: [id])

  // 한 사용자는 같은 코드를 한 번만 사용할 수 있습니다.
  @@unique([claimableStampId, userId])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int      // 별점 (1~5)
  comment   String?  @db.Text // 리뷰 내용 (최대 글자 수를 늘리기 위해 @db.Text 사용)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- 관계 설정 ---
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // --- 규칙 설정 ---
  // 한 명의 유저는 하나의 이벤트에 대해 리뷰를 한 번만 작성할 수 있습니다.
  @@unique([userId, eventId])
}